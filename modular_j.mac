/*
;; Copyright (C) 2021 Yasuaki Honda
;; modular-j.mac
;; This file is part of ModularJ package.
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2 of
;; the License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be
;; useful, but WITHOUT ANY WARRANTY; without even the implied
;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
;; PURPOSE.  See the GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public
;; License along with this program; if not, see
;; <http://www.gnu.org/licenses/>.
*/

/*
General Description

Klein's elliptic modular j-invariant, or j function in short, has a notable property that the special value for the imaginary quadratic irrational numbers can be computed exactly. The following is the algorithm implemented in Maxima in this notebook.

Let's assume  𝑡  is an imaginary quadratic irrational number, the argument for the j function.
Compute the determinant  𝐷  of  𝑡 .
List up all the reduced imaginary quadratic irrational numbers  𝑥0,⋯,𝑥𝑛 whose determinant is  𝐷 .
Note that the number of such irrationals  𝑛  is called the class number of the determinant  𝐷 .
Compute the aproximate class equation  (𝑥−𝑗(𝑥0))⋯(𝑥−𝑗(𝑥𝑛))  where  𝑗(𝑥𝑖)  is computed using q-expansion of j function.
Find the exact class equation by rounding up the coefficients of the aproximate class equation and solve it using solve() algebraically.
Find the correspondance between aproximate  𝑗(𝑥𝑖)  and the exact  𝑗(𝑥𝑖)  to know the exact value of  𝑗(𝑥𝑖) .


API Manual

InFD(p) p is a complex number. InFD(p) checks if p is in the fundamental domain of  𝑗(𝑧) .

FindInFD(p) p is a complex number. FindInFD(p) returns a complex number in the fundamental domain and equivalent to p. It shows the necessary transformations, too.

float_modular_j(t) t is a complex float number. float_modular_j(t) numerically computes the value of  𝑗(𝑡) .

FindReducedQuadIrrD(D) D is an integer. FindReducedQuadIrrD(D) computes the list of all the reduced imaginary quadratic irrational numbers whose determinant is  𝐷 .

FindClassNumberD(D) D is an integer. FindClassNumberD(D) computes the class number of the determinant  𝐷 .

FindClassPolyD(D) D is an integer. FindClassPolyD(D) computes the Hilbert class polynomial of the determinant equal to  𝐷 .

exact_modular_j(t) t is an imaginary quadratic irrational number of the form  𝑎1+𝑎2𝑎3√𝑎4  where  𝑎1,⋯,𝑎4  are integers,  𝑎2,𝑎4  positive and  𝑎3  negative. exact_modular_j(t) computes the exact value (which is an algebraic number) of  𝑗(𝑡)  using the above algorithm.
*/

debug_modular_j:false;

InFD(p):=block([absp,realp],absp:abs(p),realp:realpart(p),
  if imagpart(p) <= 0 then return (false)
  else return ((absp>1 and realp>=-1/2 and realp<1/2) or (absp=1 and -1/2<=realp and realp<=0)))$

Ta(p):=block([realp,ans],realp:realpart(p),ans:realp-floor(realp+1/2),
  if ans=1/2 then ans:ans-1,
  return(realp-ans))$

FindInFD(p):=
  block([a],a:Ta(p), if a#0 then print("Ta:",a), p:p-a,
  if abs(p)<1 then (print("S"),return(FindInFD(-1/p))),
  if abs(p)>1 then return(p),
  if abs(p)=1 then
    if realpart(p)<=0 then return(p)
    else return(-1/p))$

j_coeff:[196884, 21493760, 864299970, 20245856256, 333202640600, 4252023300096, 44656994071935, 
401490886656000, 3176440229784420, 22567393309593600, 146211911499519294, 874313719685775360, 
4872010111798142520, 25497827389410525184, 126142916465781843075]$
float_modular_j(t):=ev(1/q+744+sum(j_coeff[i]*q^i,i,1,length(j_coeff)),q:rectform(exp(2*%pi*%i*t)),eval,numer)$
bfloat_modular_j(t):=ev(1/q+744+sum(j_coeff[i]*q^i,i,1,length(j_coeff)),q:rectform(exp(2*%pi*%i*t)),fpprec:32,eval,bfloat)$

Checkabc(a,b,c):=(((-a<b) and (b<=a) and (a<c)) or ((0<=b) and (b<=a) and (a=c))) and gcd(gcd(a,b),c)=1$

FindReducedQuadIrrD(D):=block([reduced_irr_list:[]],
  for a:1 thru sqrt(abs(D)/3) do
    for b:-a+1 thru a do
      block([c], c:(b^2-D)/(4*a), if integerp(c) and Checkabc(a,b,c) then 
        push((-b+sqrt(b^2-4*a*c))/(2*a), reduced_irr_list)),
  return(reduced_irr_list))$

FindClassNumberD(D):=length(FindReducedQuadIrrD(D))$

FindClassPolyD(D):= block([reduced_irr_list,ja_list:[],aprox_class_poly:0, class_poly:0],
  reduced_irr_list:FindReducedQuadIrrD(D),
  if length(reduced_irr_list)=0 then return(0),
  ja_list:map(bfloat_modular_j,reduced_irr_list),
  aprox_class_poly:expand(product(x-ja_list[i],i,1,length(ja_list))),
  for i:0 thru hipow(aprox_class_poly,x) do
    class_poly:class_poly+round(realpart(coeff(aprox_class_poly,x,i)))*x^i,
  class_poly)$

/*
t must be of the form (a1+a2*sqrt(a3))/a4 where a1 to a4 are all integers, a2,a4 positive and a3 negative.
irr_number(t) returns [a1,a2,a3,a4]
*/
irr_number(t):=block([a1,a2,a3,a4,tmp],
  if imagpart(t)=0 then error("irr_number: argument is not an imaginary quadratic irrational number ",t),
  a4:ratdenom(t), 
  t:t*a4,
  a1:realpart(t),
  tmp:imagpart(t),
  if integerp(tmp) then [a2,a3]:[tmp,1]
  elseif op(tmp)='sqrt then [a2,a3]:[1,args(tmp)[1]]
  elseif op(tmp)="*" then [a2,a3]:[args(tmp)[1],args(args(tmp)[2])[1]]
  elseif op(tmp)="^" then [a2,a3]:[args(tmp)[1]^(args(tmp)[2]-1/2),args(tmp)[1]]
  else error("irr_number: argument is not well formated as an imaginary quadratic irrational number ",t),
  return([a1,a2,-a3,a4]))$
  
exact_modular_j(t):=block([tparts,D,fpjt,cpoly,sol,numsol],
  tparts:irr_number(t),
  D:ev(4*a2^2*a3*a4^2/gcd(gcd(a4^2,2*a1*a4),a1^2-a2^2*a3)^2,a1:tparts[1],a2:tparts[2],a3:tparts[3],a4:tparts[4]),
  if debug_modular_j=true then print("D=",D),
  cpoly:FindClassPolyD(D), if cpoly=0 then error("exact_modular_j(): Cannot compute class polynomial for", t),
  if debug_modular_j=true then print("cpoly=",cpoly),
  if hipow(cpoly,x)>=5 then error("exact_modular_j(): Degree of class polynomial is higher than 5, ", cpoly),
  sol:solve(cpoly),
  numsol:map(lambda([x],rhs(float(x))),sol),
  fpjt:float_modular_j(t),
  block([mindex,minval],mindex:1,minval:abs(numsol[1]-fpjt),
    for i:1 thru length(numsol) do
      if abs(numsol[i]-fpjt)<minval then [mindex,minval]:[i,abs(numsol[i]-fpjt)],
    return(rhs(sol[mindex]))))$

